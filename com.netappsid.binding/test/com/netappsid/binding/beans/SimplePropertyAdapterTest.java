package com.netappsid.binding.beans;

import static org.junit.Assert.*;

import java.beans.PropertyDescriptor;

import org.junit.Test;

import com.netappsid.binding.beans.support.StandardChangeSupportFactory;
import com.netappsid.test.beans.TestBean;
import com.netappsid.test.beans.TestBeanDetail;

public class SimplePropertyAdapterTest
{
	@Test
	public void testGetPropertyName()
	{
		final SimplePropertyAdapter adapter = new SimplePropertyAdapter(new BeanAdapter(new StandardChangeSupportFactory(), new TestBean("1"), TestBean.class),
				TestBean.PROPERTYNAME_PROPERTY1);

		assertEquals(TestBean.PROPERTYNAME_PROPERTY1, adapter.getPropertyName());
	}

	@Test
	public void testGetPropertyDescriptor_NullBeanReturnsNull()
	{
		final SimplePropertyAdapter adapter = new SimplePropertyAdapter(new BeanAdapter(new StandardChangeSupportFactory(), TestBean.class), TestBean.PROPERTYNAME_PROPERTY1);

		assertNull(adapter.getPropertyDescriptor());
	}

	@Test
	public void testGetPropertyDescriptor_NonAdaptablePropertyReturnsNull()
	{
		final SimplePropertyAdapter adapter = new SimplePropertyAdapter(new BeanAdapter(new StandardChangeSupportFactory(), new TestBean("1"), TestBean.class), "nonExisting");

		assertNull(adapter.getPropertyDescriptor());
	}

	@Test
	public void testGetPropertyDescriptor_AdaptablePropertyReturnsValidPropertyDescriptor()
	{
		final SimplePropertyAdapter adapter = new SimplePropertyAdapter(new BeanAdapter(new StandardChangeSupportFactory(), new TestBean("1"), TestBean.class),
				TestBean.PROPERTYNAME_PROPERTY1);
		final PropertyDescriptor propertyDescriptor = adapter.getPropertyDescriptor();

		assertNotNull(propertyDescriptor);
		assertEquals(TestBean.PROPERTYNAME_PROPERTY1, propertyDescriptor.getName());
		assertEquals(String.class, propertyDescriptor.getPropertyType());
		assertEquals("getProperty1", propertyDescriptor.getReadMethod().getName());
		assertEquals("setProperty1", propertyDescriptor.getWriteMethod().getName());
	}

	@Test
	public void testGetValue_NullBeanReturnsNull()
	{
		final SimplePropertyAdapter adapter = new SimplePropertyAdapter(new BeanAdapter(new StandardChangeSupportFactory(), TestBean.class), TestBean.PROPERTYNAME_PROPERTY1);

		assertNull(adapter.getValue());
	}

	@Test
	public void testGetValue_NonAdaptablePropertyReturnsNull()
	{
		final SimplePropertyAdapter adapter = new SimplePropertyAdapter(new BeanAdapter(new StandardChangeSupportFactory(), new TestBean("1"), TestBean.class), "nonExisting");

		assertNull(adapter.getValue());
	}

	@Test
	public void testGetValue_AdaptablePropertyReturnsBeanPropertyValue()
	{
		final TestBean bean = new TestBean("1");
		final SimplePropertyAdapter adapter = new SimplePropertyAdapter(new BeanAdapter(new StandardChangeSupportFactory(), bean, TestBean.class),
				TestBean.PROPERTYNAME_PROPERTY1);

		bean.setProperty1("TEST");
		assertEquals("TEST", adapter.getValue());
	}

	@Test
	public void testSetValue_NullBeanDoesntGenerateException()
	{
		final SimplePropertyAdapter adapter = new SimplePropertyAdapter(new BeanAdapter(new StandardChangeSupportFactory(), TestBean.class), TestBean.PROPERTYNAME_PROPERTY1);

		try
		{
			adapter.setValue("TEST");
		}
		catch (Exception e)
		{
			fail("No exception should be generated by doing this call.");
		}
	}

	@Test
	public void testSetValue_NonAdaptablePropertyDoesntGenerateException()
	{
		final SimplePropertyAdapter adapter = new SimplePropertyAdapter(new BeanAdapter(new StandardChangeSupportFactory(), new TestBean("1"), TestBean.class), "nonExisting");

		try
		{
			adapter.setValue("TEST");
		}
		catch (Exception e)
		{
			fail("No exception should be generated by doing this call.");
		}
	}

	@Test
	public void testSetValue_AdaptablePropertySetsBeanValue()
	{
		final TestBean bean = new TestBean("1");
		final SimplePropertyAdapter adapter = new SimplePropertyAdapter(new BeanAdapter(new StandardChangeSupportFactory(), bean, TestBean.class),
				TestBean.PROPERTYNAME_PROPERTY1);

		adapter.setValue("TEST");
		assertEquals("TEST", bean.getProperty1());
	}
	
	@Test
	public void testSetValue_EnsureParentBeanInstanciated()
	{
		final TestBean bean = new TestBean("1");
		BeanAdapter beanAdapter = new BeanAdapter(new StandardChangeSupportFactory(), bean, TestBean.class);
		
		SimplePropertyAdapter bean1ValueModel = beanAdapter.getValueModel(TestBean.PROPERTYNAME_BEAN1);
		BeanAdapter bean1Adapter = new BeanAdapter(new StandardChangeSupportFactory(),bean1ValueModel, TestBeanDetail.class);  
		
		final SimplePropertyAdapter adapter = new SimplePropertyAdapter(bean1Adapter, TestBeanDetail.PROPERTYNAME_PROPERTY);

		assertNull(bean.getBean1());
		adapter.setValue("PropertyValue");
		assertEquals("PropertyValue", bean.getBean1().getProperty());
	}
}
