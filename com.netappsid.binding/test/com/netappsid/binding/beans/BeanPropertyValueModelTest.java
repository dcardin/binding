package com.netappsid.binding.beans;

import java.beans.PropertyDescriptor;

import org.junit.Assert;
import org.junit.Test;

import com.google.inject.Guice;
import com.netappsid.binding.module.StandardBindingModule;
import com.netappsid.test.beans.TestBean;

public class BeanPropertyValueModelTest
{
	@Test
	public void getPropertyName()
	{
		final BeanAdapter beanAdapter = getBeanAdapterFactory().create(new TestBean("1"));
		final BeanPropertyValueModel adapter = new BeanPropertyValueModel(beanAdapter.getBeanChannel(), TestBean.PROPERTYNAME_PROPERTY1);

		Assert.assertEquals(TestBean.PROPERTYNAME_PROPERTY1, adapter.getPropertyName());
	}

	@Test
	public void getPropertyDescriptor_NullBeanReturnsNull()
	{
		final BeanAdapter beanAdapter = getBeanAdapterFactory().create();
		final BeanPropertyValueModel adapter = new BeanPropertyValueModel(beanAdapter.getBeanChannel(), TestBean.PROPERTYNAME_PROPERTY1);

		Assert.assertNull(adapter.getPropertyDescriptor());
	}

	@Test
	public void getPropertyDescriptor_NonAdaptablePropertyReturnsNull()
	{
		final BeanAdapter beanAdapter = getBeanAdapterFactory().create(new TestBean("1"));
		final BeanPropertyValueModel adapter = new BeanPropertyValueModel(beanAdapter.getBeanChannel(), "nonExisting");

		Assert.assertNull(adapter.getPropertyDescriptor());
	}

	@Test
	public void getPropertyDescriptor_AdaptablePropertyReturnsValidPropertyDescriptor()
	{
		final BeanAdapter beanAdapter = getBeanAdapterFactory().create(new TestBean("1"));
		final BeanPropertyValueModel adapter = new BeanPropertyValueModel(beanAdapter.getBeanChannel(), TestBean.PROPERTYNAME_PROPERTY1);
		final PropertyDescriptor propertyDescriptor = adapter.getPropertyDescriptor();

		Assert.assertNotNull(propertyDescriptor);
		Assert.assertEquals(TestBean.PROPERTYNAME_PROPERTY1, propertyDescriptor.getName());
		Assert.assertEquals(String.class, propertyDescriptor.getPropertyType());
		Assert.assertEquals("getProperty1", propertyDescriptor.getReadMethod().getName());
		Assert.assertEquals("setProperty1", propertyDescriptor.getWriteMethod().getName());
	}

	@Test
	public void getValue_NullBeanReturnsNull()
	{
		final BeanAdapter beanAdapter = getBeanAdapterFactory().create();
		final BeanPropertyValueModel adapter = new BeanPropertyValueModel(beanAdapter.getBeanChannel(), TestBean.PROPERTYNAME_PROPERTY1);

		Assert.assertNull(adapter.getValue());
	}

	@Test
	public void getValue_NonAdaptablePropertyReturnsNull()
	{
		final BeanAdapter beanAdapter = getBeanAdapterFactory().create(new TestBean("1"));
		final BeanPropertyValueModel adapter = new BeanPropertyValueModel(beanAdapter.getBeanChannel(), "nonExisting");

		Assert.assertNull(adapter.getValue());
	}

	@Test
	public void getValue_AdaptablePropertyReturnsBeanPropertyValue()
	{
		final TestBean bean = new TestBean("1");
		final BeanAdapter beanAdapter = getBeanAdapterFactory().create(bean);
		final BeanPropertyValueModel adapter = new BeanPropertyValueModel(beanAdapter.getBeanChannel(), TestBean.PROPERTYNAME_PROPERTY1);

		bean.setProperty1("TEST");
		Assert.assertEquals("TEST", adapter.getValue());
	}

	@Test
	public void setValue_NullBeanDoesntGenerateException()
	{
		final BeanAdapter beanAdapter = getBeanAdapterFactory().create();
		final BeanPropertyValueModel adapter = new BeanPropertyValueModel(beanAdapter.getBeanChannel(), TestBean.PROPERTYNAME_PROPERTY1);

		try
		{
			adapter.setValue("TEST");
		}
		catch (Exception e)
		{
			Assert.fail("No exception should be generated by doing this call.");
		}
	}

	@Test
	public void setValue_NonAdaptablePropertyDoesntGenerateException()
	{
		final BeanAdapter beanAdapter = getBeanAdapterFactory().create(new TestBean("1"));
		final BeanPropertyValueModel adapter = new BeanPropertyValueModel(beanAdapter.getBeanChannel(), "nonExisting");

		try
		{
			adapter.setValue("TEST");
		}
		catch (Exception e)
		{
			Assert.fail("No exception should be generated by doing this call.");
		}
	}

	@Test
	public void setValue_AdaptablePropertySetsBeanValue()
	{
		final TestBean bean = new TestBean("1");
		final BeanAdapter beanAdapter = getBeanAdapterFactory().create(bean);
		final BeanPropertyValueModel adapter = new BeanPropertyValueModel(beanAdapter.getBeanChannel(), TestBean.PROPERTYNAME_PROPERTY1);

		adapter.setValue("TEST");
		Assert.assertEquals("TEST", bean.getProperty1());
	}
	
	private BeanAdapterFactory getBeanAdapterFactory()
	{
		return Guice.createInjector(new StandardBindingModule()).getInstance(BeanAdapterFactory.class);
	}
}
